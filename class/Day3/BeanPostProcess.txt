Bean Post Processor
-------------------
Factory hook that allows for custom modification of new bean instances, 
e.g. checking for marker interfaces or wrapping them with proxies.


ApplicationContexts can autodetect BeanPostProcessor beans in their bean 
definitions and apply them to any beans subsequently created. 


You can configure multiple BeanPostProcessor interfaces and 
you can control the order in which these BeanPostProcessor interfaces 
execute by setting the order property provided the BeanPostProcessor 
implements the Ordered interface.


The BeanPostProcessors operate on bean (or object) instances, 
which means that the Spring IoC container instantiates a bean instance and 
then BeanPostProcessor interfaces do their work.


Plain bean factories allow for programmatic registration of post-processors, 
applying to all beans created through this factory.

public interface BeanPostProcessor {
	public Object postProcessAfterInitialization(bean,beanName);
	public Object postProcessBeforeInitializaion(bean,beanName);
}
class MyBeanFilter implements BeanPostProcessor
{
	public Object postProcessAfterInitialization(Object bean, String beanName){
		// logic to handle after bean intitalization
	}
	public Object postProcessBeforeInitializaion(Object bean,String beanName){
		// logic to handle before bean intitalization
	}

}


Example
--------

public class HelloWorld {
   private String message;

   public void setMessage(String message){
      this.message  = message;
   }
   public void getMessage(){
      System.out.println("Your Message : " + message);
   }
   public void init(){
      System.out.println("Bean is going through init.");
   }
   public void destroy(){
      System.out.println("Bean will destroy now.");
   }
}

import org.springframework.beans.factory.config.BeanPostProcessor;
import org.springframework.beans.BeansException;

public class InitHelloWorld implements BeanPostProcessor {
   public Object postProcessBeforeInitialization(Object bean, String beanName) 
      throws BeansException {
      
      System.out.println("BeforeInitialization : " + beanName);
      return bean;  // you can return any other object as well
   }
   public Object postProcessAfterInitialization(Object bean, String beanName) 
      throws BeansException {
      
      System.out.println("AfterInitialization : " + beanName);
      return bean;  // you can return any other object as well
   }
}


beans.xml
---------
<?xml version = "1.0" encoding = "UTF-8"?>

<beans xmlns = "http://www.springframework.org/schema/beans"
   xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation = "http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

   <bean id = "helloWorld" class = "HelloWorld"
      init-method = "init" destroy-method = "destroy">
      <property name = "message" value = "Hello World!"/>
   </bean>

   <bean class = "InitHelloWorld" />

</beans>


main
----
import org.springframework.context.support.AbstractApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class MainApp {
   public static void main(String[] args) {
      AbstractApplicationContext context = new ClassPathXmlApplicationContext("Beans.xml");

      HelloWorld obj = (HelloWorld) context.getBean("helloWorld");
      obj.getMessage();
      context.registerShutdownHook();
   }
}

