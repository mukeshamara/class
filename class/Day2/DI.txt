We can inject the dependency by constructor. The <constructor-arg> subelement of <bean> is used for constructor injection. 
We can inject

    1. primitive and String-based values
    2. Dependent object (contained object)
    3. Collection values etc.

public class Employee {  
	private int id;  
	private String name;  
  	public Employee() {
		System.out.println("def cons");
	}  
  	public Employee(int id) {
		this.id = id;
	}  
        public Employee(String name) {  
		this.name = name;
	}  
  	public Employee(int id, String name) {  
    		this.id = id;  
   		this.name = name;  	
	}	  
  	void show(){  
   		 System.out.println(id+" "+name);  
	}  
}

applicationContext.xml
-----------------------
    <beans>     
    <bean id="e" class="Employee">  
    <constructor-arg value="10" type="int"></constructor-arg>  
    </bean>  
    <beans>

Test.main
---------
public class Test {  
    public static void main(String[] args) {  
          
        Resource r=new ClassPathResource("applicationContext.xml");  
        BeanFactory factory=new XmlBeanFactory(r);  
          
        Employee s=(Employee)factory.getBean("e");  
        s.show();  
          
    }  
}


Constructor Injection with Dependent Object
--------------------------------------------

If there is HAS-A relationship between the classes, we create the instance of dependent object (contained object) first then pass it as an argument of the main class constructor. 

Here, our scenario is Employee HAS-A Address. The Address class object will be termed as the dependent object. 

public class Address {  
private String city;  
private String state;  
private String country;  
  
public Address(String city, String state, String country) {  
    super();  
    this.city = city;  
    this.state = state;  
    this.country = country;  
}  
  
public String toString(){  
    return city+" "+state+" "+country;  
}  
}  


Employee
---------
public class Employee {  
private int id;  
private String name;  
private Address address;//Aggregation  
  
public Employee() {System.out.println("def cons");}  
  
public Employee(int id, String name, Address address) {  
    super();  
    this.id = id;  
    this.name = name;  
    this.address = address;  
}  
  
void show(){  
    System.out.println(id+" "+name);  
    System.out.println(address.toString());  
}  
  
}  

applicationContext.xml
-----------------------
<beans>

<bean id="a1" class="Address">  
<constructor-arg value="ghaziabad"></constructor-arg>  
<constructor-arg value="UP"></constructor-arg>  
<constructor-arg value="India"></constructor-arg>  
</bean>  
  
  
<bean id="e" class="Employee">  
<constructor-arg value="12" type="int"></constructor-arg>  
<constructor-arg value="Sonoo"></constructor-arg>  
<constructor-arg >  
	<ref bean="a1"/>  
</constructor-arg>  
</bean>  
</beans>  

Test.main
----------

public class Test {  
    public static void main(String[] args) {  
          
        Resource r=new ClassPathResource("applicationContext.xml");  
        BeanFactory factory=new XmlBeanFactory(r);  
          
        Employee s=(Employee)factory.getBean("e");  
        s.show();  
          
    }  
}  

Constructor Injection with Collection
--------------------------------------
public class Question {  
private int id;  
private String name;  
private List<String> answers;  
  
public Question() {}  
public Question(int id, String name, List<String> answers) {  
    super();  
    this.id = id;  
    this.name = name;  
    this.answers = answers;  
}  
  
public void displayInfo(){  
    System.out.println(id+" "+name);  
    System.out.println("answers are:");  
    Iterator<String> itr=answers.iterator();  
    while(itr.hasNext()){  
        System.out.println(itr.next());  
    }  
}  
  
} 

configuration class
--------------------
<beans>
<bean id="q" class="com.javatpoint.Question">  
<constructor-arg value="111"></constructor-arg>  
<constructor-arg value="What is java?"></constructor-arg>  
<constructor-arg>  
<list>  
<value>Java is a programming language</value>  
<value>Java is a Platform</value>  
<value>Java is an Island of Indonasia</value>  
</list>  
</constructor-arg>  
</bean>  
</beans>

Test.main
----------
public class Test {  
public static void main(String[] args) {  
    Resource r=new ClassPathResource("applicationContext.xml");  
    BeanFactory factory=new XmlBeanFactory(r);  
      
    Question q=(Question)factory.getBean("q");  
    q.displayInfo();  
  
   }  
}     