Bean Life Cycle
---------------

The life cycle of a Spring bean is easy to understand. When a bean is instantiated, it may be required to perform some initialization to get it into a usable state. Similarly, when the bean is no longer required and is removed from the container, some cleanup may be required.


To define setup and teardown for a bean, 
we simply declare the <bean> with initmethod and/or destroy-method parameters. 


The init-method attribute specifies a method that is to be called on the bean immediately upon instantiation. 

destroymethod specifies a method that is called just before a bean is removed from the container.

Initialization callBacks
------------------------
In the case of XML-based configuration metadata, you can use the init-method attribute to specify the name of the method that has a void no-argument signature. For example -

<bean id = "exampleBean" class = "examples.ExampleBean" init-method = "init"/>

public class ExampleBean {
   public void init() {
      // do some initialization work
   }
}

Destruction Callbacks
---------------------
<bean id = "exampleBean" class = "examples.ExampleBean" destroy-method = "destroy"/>

public class ExampleBean {
   public void destroy() {
      // do some destruction work
   }
}

Example
-------
public class HelloWorld {
   private String message;

   public void setMessage(String message){
      this.message = message;
   }
   public void getMessage(){
      System.out.println("Your Message : " + message);
   }
   public void init(){
      System.out.println("Bean is going through init.");
   }
   public void destroy() {
      System.out.println("Bean will destroy now.");
   }
}

configuration
--------------
<beans>

   <bean id = "helloWorld" class = "com.tutorialspoint.HelloWorld" init-method = "init" 
      destroy-method = "destroy">
      <property name = "message" value = "Hello World!"/>
   </bean>

</beans>



